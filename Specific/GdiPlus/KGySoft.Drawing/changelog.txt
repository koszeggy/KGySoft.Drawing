Legend:
! Breaking change
* Compatible change
- Bugfix
+ New feature
===============================================================================

~~~~~~~~~
* v9.0.1:
~~~~~~~~~

* Common changes
================
* Referencing KGySoft.Drawing.Core v9.0.1, which contains minor bug fixes.
  See also https://github.com/koszeggy/KGySoft.Drawing/blob/master/KGySoft.Drawing.Core/changelog.txt

+ KGySoft.Drawing namespace
===========================
+ New GraphicsPathExtensions class: (meant to be added to v9.0.0 but it was internal until now)
  + New AddRoundRectangle methods - just exposing the old private implementation for GraphicsPath with the improved
    corner radius handling introduced in v9.0.0.
  + New ToPath method
  + New ToGraphicsPath method


~~~~~~~~~
! v9.0.0:
~~~~~~~~~

! Assembly changes:
===================
! Dropping support for .NET Core 2.0. Manual compilation for .NET Core 2.0 is still possible but the public NuGet
  packages are not going to support this platform anymore. If you target the .NET Core 2.0 platform in your project,
  the v9.0.0 version of the NuGet package will pick the .NET Standard 2.0 build instead.

* Common changes
================
* Referencing KGySoft.Drawing.Core v9.0.0, which enables high performance shape drawing. Combined with this package
  it makes possible to draw shapes into Bitmap instances of any pixel format, even indexed ones.
  See also https://github.com/koszeggy/KGySoft.Drawing/blob/master/KGySoft.Drawing.Core/changelog.txt
  and also https://github.com/koszeggy/KGySoft.Drawing/blob/master/README.md#shape-drawing

! KGySoft.Drawing namespace
===========================
! GraphicsExtensions class:
  ! DrawRoundRectangle/FillRoundRectangle methods:
    ! When the corner radius/radii was/were negative or too large, the result was incorrect. From now on always the
      absolute value of the corner radius parameters is used, and if they are too large, they are automatically
      adjusted to the maximum possible value. Though this is actually a fix, it's indicated as a breaking change
      because the result will be different for invalid corner radius values.
    + New overloads with floating-point parameters.


~~~~~~~~~
! v8.1.0:
~~~~~~~~~

* Common changes
================
* Referencing KGySoft.Drawing.Core v8.1.0, which improves performance, especially regarding Palette operations,
  optimized quantizers and vector operations.
  See also https://github.com/koszeggy/KGySoft.Drawing/blob/master/KGySoft.Drawing.Core/changelog.txt

! KGySoft.Drawing.Imaging namespace
===================================
! ReadableBitmapDataExtensions class:
  ! ToBitmap, BeginToBitmap, ToBitmapAsync methods:
    ! When target pixel format is not specified, these method no longer return a Bitmap with Format16bppGrayScale
      pixel format because it is basically supported by this library only but not by the native GDI+ operations.
      Instead, a Bitmap with Format8bppIndexed format with a gray-scale palette is returned, even though it may end
      up in loss of information. If you need the original behavior you still can specify the pixel format.
    - When the target pixel format is an indexed one but there is no target palette specified and the source also
      has no palette, then the back color, alpha threshold and working color space of the source are now respected.


~~~~~~~~~
! v8.0.0:
~~~~~~~~~

+ Assembly changes:
===================
+ Targeting also .NET Framework 4.6 and .NET Standard 2.1

! KGySoft.Drawing namespace
===========================
! PixelFormatExtensions class:
  ! GetInfo method: For pixel formats with linear gamma the Prefers128BitColors property is now set in the result.
  + ToPixelFormat method: Supporting the new KnownPixelFormat values of v8.0.0
* BitmapExtensions class:
  * GetReadableBitmapData/GetWritableBitmapData/GetReadWriteBitmapData methods:
    + They support getting/setting pixels using wide colors without quantizing the color information to the 32-bit
      ARGB color space.
    - Fixing possible errors when the backing buffer of the 48/64 bpp pixel formats contains invalid values.


~~~~~~~~~
* v7.2.0:
~~~~~~~~~

* Common changes
================
* Performance improvements, especially for wide pixel formats.
  See also https://github.com/koszeggy/KGySoft.Drawing/blob/master/KGySoft.Drawing.Core/changelog.txt

- KGySoft.Drawing namespace
===========================
- ImageExtensions class:
  - SaveAsIcon: Fixing alpha values when the source image has 32bpp PARGB pixel format.
- PixelFormatExtensions class:
  - GetMatchingQuantizer method: The WorkingColorSpace of the returned quantizer is set to Linear if source pixel
    format uses the linear color space.


~~~~~~~~~
! v7.1.0:
~~~~~~~~~

! Common changes
================
! From now on alpha blending operations on Bitmap instances (eg. DrawInto extensions) are performed in the linear
  color space for 48/64 bpp pixel formats on Windows. To use a specific color space regardless of the pixel format
  obtain a managed bitmap data by the new GetReadableBitmapData/GetWritableBitmapData/GetReadWriteBitmapData
  extension method overloads with WorkingColorSpace parameters and use the platform independent extension methods
  (eg. BitmapDataExtensions from the KGySoft.Drawing.Core package) instead.

+ KGySoft.Drawing namespace
===========================
+ BitmapExtensions class:
  + New GetReadableBitmapData overload with WorkingColorSpace parameter.
  + New GetWritableBitmapData overload with WorkingColorSpace parameter.
  + New GetReadWriteBitmapData overload with WorkingColorSpace parameter.


~~~~~~~~~
! v7.0.0:
~~~~~~~~~

! Assembly changes:
===================
! APIs that are not dependent on System.Drawing.Common (.NET Core/Standard 2.0 and above) have been extracted into a
  new library, KGySoft.Drawing.Core, which is now referenced by this library.
  See also https://github.com/koszeggy/KGySoft.Drawing/blob/master/KGySoft.Drawing.Core/changelog.txt
! Targeting also .NET 7. Indicated as a breaking change because if a consumer project also targets .NET 7 or newer,
  then this library can be used only on Windows. When targeting .NET 6 or earlier platforms, Unix/Linux is still
  supported if libgdiplus is installed. Platform-independent API is now in the KGySoft.Drawing.Core library.

! KGySoft.Drawing namespace
===========================
! Some types have been moved to the KGySoft.Drawing.Core package (with unchanged namespace).
! The IDrawingProgress interface has been removed. It is replaced by KGySoft.Threading.IAsyncProgress from the
  KGySoft.CoreLibraries assembly.
! The DrawingProgress struct has been removed. It is replaced by KGySoft.Threading.AsyncProgress<T> from the
  KGySoft.CoreLibraries assembly.
! The AsyncConfigBase, AsyncConfig and TaskConfig classes and the IAsyncContext interface have been replaced by the
  identically named types from the KGySoft.Threading namespace in the KGySoft.CoreLibraries assembly.
! BitmapExtensions class:
  ! CloneCurrentFrame method returns a Bitmap with Format24bppRgb pixel format for CMYK sources.
+ ImageExtensions class:
  + ConvertPixelFormat methods: supporting CMYK pixel format for source images.
  + ToIcon methods: supporting CMYK pixel format for source images.
+ PixelFormatExtensions class:
  + The IsIndexed method has been made public
  + New ToKnownPixelFormat(PixelFormat) and ToPixelFormat(KnownPixelFormat) methods
  + New GetInfo method
  + New GetMatchingQuantizer method

! KGySoft.Drawing.Imaging namespace
===================================
! Most public APIs have been moved into the KGySoft.Drawing.Core package (with unchanged namespace). See the actual
  API changes here: https://github.com/koszeggy/KGySoft.Drawing/blob/master/KGySoft.Drawing.Core/changelog.txt
+ New ReadableBitmapDataExtensions class: contains the ToBitmap/BeginToBitmap/EndToBitmap/ToBitmapAsync methods of
  the original BitmapDataExtensions class that is now in the KGySoft.Drawing.Core package.
  + New ToBitmap/BeginToBitmap/ToBitmapAsync overloads with custom pixel format, quantizer and ditherer.


~~~~~~~~~
* v6.3.2:
~~~~~~~~~

* Assembly changes:
===================
* Upgrading KGySoft.CoreLibraries to version 6.0.2. This may also fix some possible issues if your project uses
  partially trusted domains (.NET Framework 4.x), or when you target the x86 platform (.NET Core 3.0 and above).

+ KGySoft.Drawing.Imaging namespace
===================================
+ The ColorExtensions class is now public. Available extension methods: Blend, TolerantEquals and GetBrightness.


~~~~~~~~~
* v6.3.1:
~~~~~~~~~

* KGySoft.Drawing.Imaging namespace
===================================
* AnimatedGifConfiguration class:
  + New AllowClippedFrames property
  * The EncodeTransparentBorders property has been made obsolete in favor of the new AllowClippedFrames property.
* GifEncoder.EncodeAnimation method:
  + AnimatedGifConfiguration.AllowDeltaFrames is now supported also for quantizers without transparency.
  - If quantizer was not explicitly set, AnimatedGifConfiguration.AllowDeltaFrames was ignored.
  - Input frames with custom indexed pixel format with more than 8 bpp were not always handled correctly.
- BitmapDataFactory.CreateBitmapData methods: Not omitting backColor and alphaThreshold parameters even for pixel
  formats with alpha support because in some rare cases their value can be relevant (eg. when using the
  PredefinedColorsQuantizer.FromBitmapData method)


~~~~~~~~~
* v6.3.0:
~~~~~~~~~

* KGySoft.Drawing.Imaging namespace
===================================
* BitmapDataExtensions class:
  + New Clone/BeginClone/CloneAsync overloads to be able to clone a specific region without specifying pixel format.
  * Improving Clear performance in some cases.
+ BitmapDataFactory class:
  + New CreateBitmapData overloads to create bitmap data for preallocated memory. Supporting 1D/2D arrays of any
    unmanaged element type (structs without references) as well as unmanaged memory and custom pixel formats.
+ New PixelFormatInfo struct to support custom pixel formats.
+ New ICustomBitmapDataRow/ICustomBitmapDataRow<T> interfaces to support accessing rows with custom pixel formats.
+ PredefinedColorsQuantizer:
  + FromBitmapData method: From now on it supports also custom pixel formats.
* OptimizedPaletteQuantizer:
  + Maximum colors upper bound is no longer limited to 256 colors. New limit is now 65536 colors.
  + New ConfigureBitLevel method to adjust possible quality and memory usage.
  * Improving MedianCut quantizer performance
  * Optimizing memory usage of Wu quantizer
* GifEncoder class:
  * The performance and memory usage of the LZW compression has been improved.
  - EncodeAnimation method: If quantizer is not set but the input image is already indexed, then not using the
    default Wu quantizer on the input frame.


~~~~~~~~~
* v6.2.0:
~~~~~~~~~

* Assembly changes:
===================
+ Explicitly targeting also .NET Framework 4.6.
- Removing P/Invoke calls for special functions, whose entry points are mocked by the JIT compiler because these
  were not supported in all cases.

* KGySoft.Drawing.Imaging namespace
===================================
* GifEncoder class: Improved quality when AnimatedGifConfiguration.AllowDeltaFrames property is true.
+ AnimatedGifConfiguration: New DeltaTolerance property.
- BitmapDataExtensions class: Fixing blending of DrawInto/BeginDrawInto/DrawIntoAsync methods if target
  is a custom IReadWriteBitmapData implementation.


~~~~~~~~~
! v6.1.0:
~~~~~~~~~

- Common changes:
=================
- Using unified entry points on Windows for P/Invoke calls both for .NET Framework and .NET/Core platforms. This
  helps to avoid issues when a .NET Framework build is executed on .NET/Core (should not occur when using package
  references but may happen when developing VisualStudio extensions).

+ KGySoft.Drawing namespace:
============================
+ ImageExtensions class:
  + New SaveAsHighColorGif methods

! KGySoft.Drawing.Imaging namespace:
====================================
! IBitmapDataRow interface:
  ! New Width property. This is a breaking change only if you have custom implementations for this interface.
    It simply exposes the Width property of the owner IBitmapData instance.
  ! New Size property. This is a breaking change only if you have custom implementations for this interface.
    It simply exposes the RowSize property of the owner IBitmapData instance.
* GifEncoder:
  + New BeginEncodeAnimation and EndEncodeAnimation methods
  + New EncodeAnimationAsync method (.NET Framework 4.0 and above)
  + New BeginEncodeImage and EndEncodeImage methods
  + New EncodeImageAsync method (.NET Framework 4.0 and above)
  + New EncodeHighColorImage/BeginEncodeHighColorImage/EndEncodeHighColorImage methods
  + New EncodeHighColorImageAsync method (.NET Framework 4.0 and above)
  - AddImage method: Improving the compatibility with some decoders by always adding the Graphic Control Extension
    for subsequent frames.
  - Fixing possibly improper clearing regions when AnimatedGifConfiguration.AllowDeltaFrames is true and
    AnimatedGifConfiguration.EncodeTransparentBorders is false.
+ AnimatedGifConfiguration class:
  + New ReportOverallProgress property


~~~~~~~~~
! v6.0.0:
~~~~~~~~~

! Assembly changes:
===================
! Updating System.Drawing.Common version to 6.0.0. If targeting .NET 5.0 or later, then on non-Windows systems this
  might be a breaking change. See the description of the DrawingModule.Initialize method for details.
* Updating KGySoft.CoreLibraries version

! KGySoft.Drawing namespace:
============================
! ImageExtensions class:
  ! The SaveAsGif methods from mow on use the new GifEncoder class. The behavior is functionally equivalent with the
    previous versions but the actual produced stream can be different.
  + New SaveAsAnimatedGif methods
  + New SaveAsMultipageTiff overload
* DrawingModule class: On non-Windows Systems the module initializer enables using System.Drawing types that depend
  on native GDI+ calls.

! KGySoft.Drawing.Imaging namespace:
====================================
! IBitmapData interface:
  ! New IsDisposed property (this is a breaking change only if you have 3rd party IBitmapData implementations)
+ BitmapDataExtension class:
  + New Clip overloads to be able to specify whether the underlying bitmap data should be diposed when the returned
    instance is disposed.
+ Palette class:
  + New indexer (same as the GetColor method)
+ New GifEncoder class to be able to save GIF images without a system encoder, even animated ones
+ New AnimatedGifConfiguration class
+ New GifGraphicsDisposalMethod enum
+ New GifCompressionMode enum


~~~~~~~~~
* v5.3.1:
~~~~~~~~~

* Assembly changes:
===================
* Members are annotated for using C# 8.0 nullable references
* The module initializer initializes the resources.
+ Targeting also .NET 5.0

* KGySoft.Drawing namespace:
============================
+ New DrawingModule class: To be able to trigger module initialization without calling any specific feature.
* Icons class: Using non-locking caches

* KGySoft.Drawing.Imaging namespace:
====================================
- BitmapDataFactory class:
  - BeginLoad/LoadAsync methods: They didn't use the specified async configuration.
- BitmapDataExtensions class:
  - Clear/BeginClear/ClearAsync methods: They could throw a NullReferenceException if a custom IWritableBitmapData
    instance had indexed PixelFormat but its Palette was null. From now on even such bitmap data can be cleared but
    the specified color will be ignored and the data is always cleared with zero palette index.
  * AdjustGamma/BeginAdjustGamma/AdjustGammaAsync methods: Improving performance
* Palette class: Improving performance when initialized without a custom mapping (cache is now totally lock-free).


~~~~~~~~~
! v5.3.0:
~~~~~~~~~

* KGySoft.Drawing namespace:
============================
* BitmapExtensions class:
  - Resize method (with ScalingMode overload): fixing some interpolated resizing glitches in edge cases
  * GetColors/GetColorCount methods: Improving performance
* Icons class:
  * The shadow mask of Icon resources have been changed so they appear better when displayed on a display or
    operating system with no alpha gradient support.
* ImageExtensions class:
  + New BeginConvertPixelFormat/EndConvertPixelFormat methods
  + New ConvertPixelFormatAsync methods (on .NET 4.0 and above)
  + New ToIcon overload with ScalingMode parameter
  - ConvertPixelFormat methods: Setting ColorPalette.Flags of the result Bitmap correctly. In Mono/Linux it could
    happen that the result Bitmap had alpha palette entries but the bitmap wasn't rendered with alpha colors.
+ New IAsyncContext interface
+ New IDrawingProgress interface
+ New DrawingProgress struct
+ New AsyncConfig class
+ New TaskConfig class (on .NET 4.0 and above)

! KGySoft.Drawing.Imaging namespace:
====================================
! OptimizedPaletteQuantizer class:
  ! MedianCut method: The generated palette can be different from the ones in the previous versions: for large
    homogeneous areas it was possible that the palette contained the same color entry multiple times.
  - Octree method: Fixing a possible exception under .NET 3.5 caused by different behavior of Array.Sort
! RandomNoiseDitherer
  ! Constructor: An ArgumentOutOfRangeException is thrown for invalid strength
  ! The result differs from previous versions when using a specific seed
  * Improved performance
! InterleavedGradientNoiseDitherer constructor: An ArgumentOutOfRangeException is thrown for invalid strength
! IQuantizer interface:
  ! The Initialize method has a new IAsyncContext parameter so a quantizer implementation can check cancellation
    and is able to report progress
! IDitherer interface:
  ! The Initialize method has a new IAsyncContext parameter so a ditherer implementation can check cancellation
    and is able to report progress
* BitmapDataExtensions class:
  + New Save/BeginSave/EndSave methods
  + New SaveAsync method (on .NET 4.0 and above)
  + New BeginClone/EndClone methods
  + New CloneAsync methods (on .NET 4.0 and above)
  + New BeginCopyTo/EndCopyTo methods
  + New CopyToAsync method (on .NET 4.0 and above)
  + New BeginDrawInto/EndDrawInto methods
  + New DrawIntoAsync methods (on .NET 4.0 and above)
  + New BeginToBitmap/EndToBitmap methods
  + New ToBitmapAsync method (on .NET 4.0 and above)
  + New BeginGetColors/EndGetColors methods
  + New GetColorsAsync method (on .NET 4.0 and above)
  + New BeginGetColorCount/EndGetColorCount methods
  + New GetColorCountAsync method (on .NET 4.0 and above)
  + New BeginToGrayscale/EndToGrayscale methods
  + New ToGrayscaleAsync method (on .NET 4.0 and above)
  + New BeginMakeGrayscale/EndMakeGrayscale methods
  + New MakeGrayscaleAsync method (on .NET 4.0 and above)
  + New BeginToTransparent/EndToTransparent methods
  + New ToTransparentAsync methods (on .NET 4.0 and above)
  + New BeginMakeTransparent/EndMakeTransparent methods
  + New MakeTransparentAsync method (on .NET 4.0 and above)
  + New BeginClear/EndClear methods
  + New ClearAsync method (on .NET 4.0 and above)
  + New BeginQuantize/EndQuantize methods
  + New QuantizeAsync method (on .NET 4.0 and above)
  + New BeginDither/EndDither methods
  + New DitherAsync method (on .NET 4.0 and above)
  + New BeginTransformColors/EndTransformColors methods
  + New TransformColorsAsync method (on .NET 4.0 and above)
  + New BeginReplaceColor/EndReplaceColor methods
  + New ReplaceColorAsync method (on .NET 4.0 and above)
  + New BeginInvert/EndInvert methods
  + New InvertAsync method (on .NET 4.0 and above)
  + New BeginMakeOpaque/EndMakeOpaque methods
  + New MakeOpaqueAsync method (on .NET 4.0 and above)
  + New BeginAdjustBrightness/EndAdjustBrightness methods
  + New AdjustBrightnessAsync method (on .NET 4.0 and above)
  + New BeginAdjustContrast/EndAdjustContrast methods
  + New AdjustContrastAsync method (on .NET 4.0 and above)
  + New BeginAdjustGamma/EndAdjustGamma methods
  + New AdjustGammaAsync method (on .NET 4.0 and above)
  * GetColors/GetColorCount methods: improving performance
  - ToBitmap method: Setting ColorPalette.Flags of the result Bitmap correctly. In Mono/Linux it could happen that
    the result Bitmap had alpha palette entries but the bitmap wasn't rendered with alpha colors in a GUI.
  - DrawInto methods: Fixing some rare case interpolation issues related to resizing
+ BitmapDataFactory class:
  + New Load/BeginLoad/EndLoad methods
  + New LoadAsync method (on .NET 4.0 and above)


~~~~~~~~~
* v5.2.1:
~~~~~~~~~

+ Assembly changes:
===================
+ Targeting also .NET Standard 2.0.
+ Targeting also .NET Standard 2.1.

- KGySoft.Drawing namespace:
============================
- MetafileExtensions class:
  - ToBitmap method: Fixing result in Windows if keeping aspect ratio without anti-aliasing and metafile origin is
    not at Point.Zero location (a metafile can be located even at negative coordinates). On Linux/Mono the result
    still can be misplaced though.
- Icons/IconExtensions classes: Tolerating if BMP icon stream does not have a transparency mask.


~~~~~~~~~
! v5.2.0:
~~~~~~~~~

! KGySoft.Drawing namespace:
============================
! PixelFormatExtensions:
  ! The IsSupported method has been renamed to IsSupportedNatively because BitmapDataFactory can create a managed
    bitmap data of any pixel formats.
! ImageExtensions class:
  ! SaveAsMultipageTiff: On Linux the used System.Drawing members throw a NotImplementedException, which is now
    caught and a PlatformNotSupportedException is thrown instead
  * DrawInto methods:
    + New overloads that allow custom quantizing.
    + New overloads that allow resizing.
    - Using alpha blending even if a ditherer is used for the drawing.
    - Fixing result with ditherers that rely on actual content
  * ToIcon(Image, int, bool): Using custom resizing for anti-aliasing to prevent process-wide locking used by
    Graphics.DrawImage
! BitmapExtensions class:
  ! The old Resize method returns a Bitmap with Format32bppPArgb pixel format instead of Format32bppArgb.
  + New Resize overload that does not use Graphics.DrawImage internally and thus it does not use a process-wide lock
  - Clear methods: Fixing result with ditherers that rely on actual content
  - TransformColors methods: Fixing result with ditherers that rely on actual content
! GraphicsExtensions class:
  ! ToBitmap method:
    ! If the Graphics belongs to a Bitmap, and there is any clipping on Graphics, then the result Bitmap preserves
      original PixelFormat instead of always returning a Format32bppArgb Bitmap.
    ! If the Graphics belongs to a Metafile a NotSupportedException is thrown instead of returning null.
    * No Graphics.DrawImage is used internally anymore to avoid using process-wide locks.
* MetafileExtensions class:
  + New ToBitmap overload with keepAspectRatio parameter
  * Using custom resizing for anti-aliasing to prevent process-wide locking caused by Graphics.DrawImage
+ New ScalingMode enum for Resize and DrawInto extension methods

! KGySoft.Drawing.Imaging namespace:
====================================
! IBitmapData interface: BackColor and AlphaThreshold properties are now exposed by this interface. These are the
  same values that you can specify when using the Get[Readable/Writable/ReadWrite]BitmapData methods.
! IQuantizer/IDitherer: new InitializeReliesOnContent property - when returns false it helps to optimize performance
  when quantizing/dithering is used for resizing or with blended sources.
+ The BitmapDataFactory class has been made public. From now on you can create completely managed bitmap data on any
  platform with any pixel format.
+ New BitmapDataExtensions class to provide similar functionality some for IBitmapData instances that are in the
  already existing BitmapExtensions and ImageExtensions classes such as DrawInto/Quantize/Dither/Clear/etc,
  as well as adding some new methods such as CopyTo/Clip/Clone
+ Color32 struct: new ToOpaque method
+ Palette class: new static members for creating a Palette with common color entries.
+ PredefinedColorsQuantizer class:
  + New Argb8888 method
  + The FromBitmapData method has been made public
  + New FromPixelFormat method


~~~~~~~~~
! v5.1.0:
~~~~~~~~~

* Assembly changes:
===================
* Referencing KGySoft.CoreLibraries 5.1.1

! KGySoft.Drawing namespace:
============================
! BitmapExtensions class
  ! The GetColorCount method does not transform pixels of wide color formats to 32-bit colors anymore so it may
    return a different result (an accurate one) for Bitmaps with 16-bit grayscale, 48-bit and 64-bit PixelFormats.
  - Clear method: fixing direct clearing (when no ditherer is used) for bitmaps with negative stride.
! Icons class:
  ! Combine methods:
    ! Icons larger than 64x64 were saved as compressed by default. Now compressing icons with size at least 256x256
      for better compatibility with some applications/platforms.
    ! Icon images with lower than 32 bits-per-pixel are not compressed anymore. Even Windows has problems with 24
      BPP compressed icons and transparency mask for lower BPPs can be generated only for uncompressed images.
    + Adding new overloads with IEnumerable<Icon> and IEnumerable<Bitmap> parameters.
! IconExtensions class:
  ! SaveHighQuality method has been renamed to SaveAsIcon to match with its ImageExtensions counterpart.
  ! ToMultiResBitmap methods: They don't return compressed results on any platforms anymore because PNG compressed
    sub-images could cause problems even on Windows systems. The overload with the forceUncompressedResult parameter
    is now obsolete.
  ! Combine methods:
    ! Icons larger than 64x64 were saved as compressed by default. Now compressing icons with size at least 256x256
      for better compatibility with some applications/platforms.
    ! Icon images with lower than 32 bits-per-pixel are not compressed anymore. Even Windows has problems with 24
      BPP compressed icons and transparency mask for lower BPPs can be generated only for uncompressed images.
    + Adding new overloads with IEnumerable<Icon> and IEnumerable<Bitmap> parameters.
  + New GetIconInfo methods
  - Improving appearance of 32bpp icons on Windows XP when saving uncompressed.
  - ExtractIcon and ExtractBitmap overloads: Requested icon size did not work for larger than 256x256 icon sizes or
    PNG compressed icons smaller than 256x256 pixels.
  - ExtractIcon: It could return null if the requested icon was not supported (just like ExtractNearestIcon) though
    according to the documentation this method should throw PlatformNotSupportedExteption in such cases.
+ New IconInfo type
+ The PixelFormatExtensions class has been made public along with some methods:
  + ToBitsPerPixel
  + IsIndexed
  + IsValidFormat
  + IsSupported
- ImageExtensions class:
  - Fixing SaveAsTiff if currentFrameOnly = false and image contains non-icon images.
  - The SaveAsMultipageTiff method now preserves the colors of non-BW 1bpp pages. When reloaded, the affected pages
    will have 4bpp PixelFormat.

* KGySoft.Drawing.Imaging namespace:
====================================
+ IBitmapData interface: New RowSize property
- IReadableBitmapDataRow.ReadRaw<T> and IWritableBitmapDataRow.WriteRaw<T> methods: The range check of the internal
  implementations have been fixed for bitmaps with negative stride.
- Palette class: Fixing a possible issue in default caching logic for concurrent access.


~~~~~~~~~
! v5.0.0:
~~~~~~~~~

! Assembly changes:
===================
! Referencing KGySoft.CoreLibraries 5.0.1
+ Targeting also .NET Core 2.0.
+ Targeting also .NET Core 3.0.

+ KGySoft.Drawing.Imaging namespace:
====================================
A New namespace for fast and direct Bitmap pixel manipulation in a type-safe and managed way.
Additionally, provides types for quantizing and dithering.
The new public types in this namespace:
+ IBitmapData interface
+ IReadableBitmapData interface
+ IWritableBitmapData interface
+ IReadWriteBitmapData interface
+ IBitmapDataRow interface
+ IReadableBitmapDataRow interface
+ IWritableBitmapDataRow interface
+ IReadWriteBitmapDataRow interface
+ IDitherer interface
+ IDitheringSession interface
+ IQuantizer interface
+ IQuantizingSession interface
+ PredefinedColorsQuantizer class
+ OptimizedPaletteQuantizer class
+ OrderedDitherer class
+ ErrorDiffusionDitherer class
+ InterleavedGradientNoiseDitherer class
+ RandomNoiseDitherer class
+ Palette class
+ Color32 structure

- KGySoft.Drawing namespace:
============================
+ BitmapExtensions class:
  - Resize method:
    - Fixing resize if keepAspectRatio is true
    - Supporting every source pixel format
    * keepAspectRation parameter is now optional (default value: false)
  + New GetReadableBitmapData/GetWritableBitmapData/GetReadWriteBitmapData methods: They provide and fast managed
    pixel access and/or manipulation for any pixel formats.
  + New Quantize method: Reduces number of colors
  + New Dither method: Reduces number of colors with dithering
  + New Clear methods: Similar to Graphics.Clear but supports every PixelFormat
  + New GetColorCount method
  + New TransformColors method
  + New ReplaceColor method
  + New Inverse method
  + New MakeOpaque method
  + New MakeGrayscale method
  + New AdjustBrightness method
  + New AdjustContrast method
  + New AdjustGamma method
- IconExtensions class:
  - ExtractBitmap/ExtractBitmaps:
    - Fixing ArgumentNullException if the icon was created from a handle and keepOriginalFormat parameter was true.
    - Returning null instances on Linux for unsupported icon sizes instead of throwing an exception.
  - ExtractNearestBitmap method: On Linux if large icon size is not supported returning the next largest icon
    instead of throwing an exception.
  - Combine methods:
    - Have been fixed for indexed bitmaps with specified transparent color
    - If a Bitmap instance contain multiple icons all of them are added
+ ImageExtensions class:
  + ConvertPixelFormat method:
    + Supporting every pixel formats, including Format16bppGrayScale and Format16bppArgb1555.
    + New backColor optional parameter: Specifies a background color for non-alpha pixel formats. From now on
      converting alpha bitmaps to non-alpha ones the color of the originally alpha pixels will not be necessarily
      black. Not fully transparent pixels are blended with the specified background color.
    + New alphaThreshold optional parameter: If the new pixel format has one bit alpha or is indexed, then specifies
      a threshold value for treating alpha pixels completely transparent. Alpha pixels, which are not treated
      transparent are blended with the backColor parameter.
    + New overloads for omitting palette and for using a custom quantizer and ditherer.
  * ToGrayscale method: Now supports every source pixel format.
  - EqualsByContent method:
    - Images with different raw format were considered different even if their raw content were the same. From now
      on images with different raw format can also be considered equal (as expected based on the documentation).
    - Images with the same stride size were considered different if the absolute value of their stride were
      different (a top-down image was compared to a bottom-up image).
  + New DrawInto methods: Similar to Graphics.DrawImage but supports every PixelFormat
  ! The old SaveAsGif overloads are marked Obsolete. They are improved though and use the new quantizers/ditherers
    rather than relying on the dithering of the built-in GIF encoder.
  - SaveAsMultipageTiff method: Handling of some PixelFormats have been fixed.
  + New ToIcon overload: allows to convert non-squared images to icons, the result may have more images.
  + New SaveAsBmp method
  + New SaveAsGif overload with custom quantizer and ditherer
  + New SaveAsIcon methods
  + New SaveAsJpeg method
  + New SaveAsPng method
  + New SaveAsTiff method
- MetafileExtensions class:
  - Save method: Fixing an ArgumentException if the raw format of the metafile to save is WMF rather than EMF.


~~~~~~~~~
! v4.7.0:
~~~~~~~~~

! Assembly: Referencing KGySoft.CoreLibraries v4.7.0

! KGySoft.Drawing namespace:
============================
! IconExtensions class:
  ! ExtractNearestBitmap/ExtractNearestIcon methods: Size has preference over BPP value and on equal distances
    the larger size and higher BPP values are selected. In contrast, in previous versions the result could
    depend on the order of the stored images.
  + New ToUncompressedIcon method.
  + New IsCompressed method.
  + New GetBitsPerPixel method.
  * ToMultiResBitmap method:
    + A new overload that can be used to prevent compression for larger images in the result bitmap.
    - The original overload prevents compression in Windows XP and allows it in Windows Vista and above.
  * ExtractIcons, ExtractIcon, ExtractNearestIcon, Combine methods:
    + New overloads that can be used to prevent compression if the result icon contains larger images.
    - The original overloads prevent compression in Windows XP and allows it in Windows Vista and above.
  + SaveHighQuality method: New forceUncompressedResult optional parameter.

! ImageExtensions class:
  ! ConvertPixelFormat method:
    ! The return type has been changed to Bitmap from Image
    * The palette parameter is now optional.

* Icons class:
  + New FromStream methods.
  - Information, Warning, Question, Error, Shield, Application,
    SecurityShield, SecuritySuccess, SecurityWarning, SecurityQuestion, SecurityError properties:
    If obtained in Windows XP, the resulting icon does not contain compressed images.
  * Combine methods:
    + New overloads that can be used to prevent compression if the result icon contains larger images.
    - The original overloads prevent compression in Windows XP and allows it in Windows Vista and above.
  + Application property: 64x64 image has been added.
  + Information property: 64x64, 24x24 and 20x20 images have been added.
  + Warning property: 64x64, 24x24 and 20x20 images have been added.
  + Error property: 64x64 and 20x20 images have been added.
  + Question property: 64x64 image has been replaced, 24x24 and 20x20 images have been added.


~~~~~~~~~
* v4.6.1:
~~~~~~~~~

* KGySoft.Drawing namespace:
============================
* IconExtensions class:
  - ToMultiResBitmap: Fixing InvalidOperationException
  - ExtractBitmap and ExtractIcon overloads: Not creating unnecessary Bitmap/Icon instances, which would be discarded anyway.


~~~~~~~~~
! v4.6.0:
~~~~~~~~~

! Assembly: Applying SecurityRuleSet.Level2 and adjusting security critical calls in the whole assembly.
  This is a breaking change for .NET4.0 and above only if the caller assembly is partially trusted or is
  security transparent and tries to call the few of the public methods, which are security critical.
* Moving the repository to GitHub
! Referencing KGySoft.CoreLibraries 4.6.0 and using its public resources for general messages.
+ Dynamic localizable resources are applied for KGySoft.Drawing

! KGySoft.Drawing namespace:
============================
! Removing the Images class along with the related resources
+ Moving public SaveAsGif methods to KGySoft.Drawing from VisualizerHelpers
